/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AttachmentsIdImport } from './routes/attachments/$id'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()
const UploadIndexLazyImport = createFileRoute('/upload/')()
const UploadResetLazyImport = createFileRoute('/upload/reset')()

// Create/Update Routes

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const UploadIndexLazyRoute = UploadIndexLazyImport.update({
  id: '/upload/',
  path: '/upload/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/upload/index.lazy').then((d) => d.Route))

const UploadResetLazyRoute = UploadResetLazyImport.update({
  id: '/upload/reset',
  path: '/upload/reset',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/upload/reset.lazy').then((d) => d.Route))

const AttachmentsIdRoute = AttachmentsIdImport.update({
  id: '/attachments/$id',
  path: '/attachments/$id',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/attachments/$id.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/attachments/$id': {
      id: '/attachments/$id'
      path: '/attachments/$id'
      fullPath: '/attachments/$id'
      preLoaderRoute: typeof AttachmentsIdImport
      parentRoute: typeof rootRoute
    }
    '/upload/reset': {
      id: '/upload/reset'
      path: '/upload/reset'
      fullPath: '/upload/reset'
      preLoaderRoute: typeof UploadResetLazyImport
      parentRoute: typeof rootRoute
    }
    '/upload/': {
      id: '/upload/'
      path: '/upload'
      fullPath: '/upload'
      preLoaderRoute: typeof UploadIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/attachments/$id': typeof AttachmentsIdRoute
  '/upload/reset': typeof UploadResetLazyRoute
  '/upload': typeof UploadIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/attachments/$id': typeof AttachmentsIdRoute
  '/upload/reset': typeof UploadResetLazyRoute
  '/upload': typeof UploadIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/attachments/$id': typeof AttachmentsIdRoute
  '/upload/reset': typeof UploadResetLazyRoute
  '/upload/': typeof UploadIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/attachments/$id' | '/upload/reset' | '/upload'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/attachments/$id' | '/upload/reset' | '/upload'
  id: '__root__' | '/' | '/attachments/$id' | '/upload/reset' | '/upload/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AttachmentsIdRoute: typeof AttachmentsIdRoute
  UploadResetLazyRoute: typeof UploadResetLazyRoute
  UploadIndexLazyRoute: typeof UploadIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AttachmentsIdRoute: AttachmentsIdRoute,
  UploadResetLazyRoute: UploadResetLazyRoute,
  UploadIndexLazyRoute: UploadIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/attachments/$id",
        "/upload/reset",
        "/upload/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/attachments/$id": {
      "filePath": "attachments/$id.tsx"
    },
    "/upload/reset": {
      "filePath": "upload/reset.lazy.tsx"
    },
    "/upload/": {
      "filePath": "upload/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
